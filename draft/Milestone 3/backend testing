{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyodbc\n",
    "\n",
    "def create_connection():\n",
    "    connection_string = (\n",
    "        \"DRIVER={ODBC Driver 17 for SQL Server};\"\n",
    "        \"SERVER=LAPTOP-HNTF824S\\\\SQLEXPRESS01;\"  \n",
    "        \"DATABASE=MovieBooking;\"  \n",
    "        \"Trusted_Connection=yes;\"  \n",
    "    )\n",
    "    \n",
    "    return pyodbc.connect(connection_string)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Columns in Customer table:\n",
      "User_ID\n",
      "Name\n",
      "Password\n",
      "Address\n",
      "Phone_No\n",
      "Visa\n"
     ]
    }
   ],
   "source": [
    "def print_customer_columns():\n",
    "    try:\n",
    "        connection = create_connection()\n",
    "        cursor = connection.cursor()\n",
    "        query = \"\"\"\n",
    "        SELECT COLUMN_NAME \n",
    "        FROM INFORMATION_SCHEMA.COLUMNS \n",
    "        WHERE TABLE_NAME = 'Customer';\n",
    "        \"\"\"\n",
    "        cursor.execute(query)\n",
    "        columns = cursor.fetchall()\n",
    "        print(\"Columns in Customer table:\")\n",
    "        for column in columns:\n",
    "            print(column[0])\n",
    "    except Exception as e:\n",
    "        print(f\"Error: {e}\")\n",
    "    finally:\n",
    "        connection.close()\n",
    "\n",
    "print_customer_columns()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Customer inserted successfully!\n"
     ]
    }
   ],
   "source": [
    "def insert_customer():\n",
    "\n",
    "    name = input(\"Enter Name: \")\n",
    "    password = input(\"Enter Password: \")\n",
    "    address = input(\"Enter Address: \")\n",
    "    phone_no = input(\"Enter Phone Number: \")\n",
    "    visa = input(\"Enter Visa (16 digits): \")\n",
    "\n",
    "    query = \"\"\"\n",
    "    INSERT INTO Customer (Name, Password, Address, Phone_No, Visa)\n",
    "    VALUES (?, ?, ?, ?, ?);\n",
    "    \"\"\"\n",
    "    \n",
    "    try:\n",
    "        connection = create_connection()\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(query, (name, password, address, phone_no, visa))\n",
    "        connection.commit()\n",
    "        print(\"Customer inserted successfully!\")\n",
    "    except Exception as e:\n",
    "        print(f\"Error: {e}\")\n",
    "    finally:\n",
    "        connection.close()\n",
    "insert_customer()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   User_ID     Name      Password Address       Phone_No              Visa\n",
      "0        1  youssef  uiahdiaadiuh   safwa    01117558976  1234567894561236\n",
      "1        2      amr   hadbfebifua  ma3ady  0454546106516  1234567894561236\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\youse\\AppData\\Local\\Temp\\ipykernel_27944\\3302854021.py:7: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
      "  data = pd.read_sql(query, conn)\n"
     ]
    }
   ],
   "source": [
    "import pyodbc\n",
    "import pandas as pd\n",
    "conn = create_connection()\n",
    "query = \"SELECT * FROM Customer;\"\n",
    "data = pd.read_sql(query, conn)\n",
    "print(data)\n",
    "conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Name       Phone_No       Address\n",
      "0    joe wael    01118559876        Diar 1\n",
      "1         amr  0454546106516        ma3ady\n",
      "2        seif     0118695366        Greens\n",
      "3  hihafiaori   088899995555  sbhdhfbisdfs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\youse\\AppData\\Local\\Temp\\ipykernel_27944\\290797400.py:3: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
      "  data = pd.read_sql(query, conn)\n"
     ]
    }
   ],
   "source": [
    "conn = create_connection()\n",
    "query = \"SELECT Name, Phone_No, Address FROM Customer;\"\n",
    "data = pd.read_sql(query, conn)\n",
    "print(data)\n",
    "conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Customer with User_ID 1 has been updated.\n"
     ]
    }
   ],
   "source": [
    "conn = create_connection()\n",
    "cursor = conn.cursor()\n",
    "user_id = input(\"Enter the User_ID of the customer you want to update: \")\n",
    "name = input(\"Enter the new Name: \")\n",
    "phone_no = input(\"Enter the new Phone Number: \")\n",
    "address = input(\"Enter the new Address: \")\n",
    "\n",
    "update_query = \"\"\"\n",
    "    UPDATE Customer\n",
    "    SET Name = ?, Phone_No = ?, Address = ?\n",
    "    WHERE User_ID = ?\n",
    "\"\"\"\n",
    "cursor.execute(update_query, (name, phone_no, address, user_id))\n",
    "\n",
    "conn.commit()\n",
    "print(f\"Customer with User_ID {user_id} has been updated.\")\n",
    "conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Name       Phone_No       Address\n",
      "0    joe wael    01118559876        Diar 1\n",
      "1         amr  0454546106516        ma3ady\n",
      "2        seif     0118695366        Greens\n",
      "3  hihafiaori   088899995555  sbhdhfbisdfs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\youse\\AppData\\Local\\Temp\\ipykernel_27944\\290797400.py:3: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
      "  data = pd.read_sql(query, conn)\n"
     ]
    }
   ],
   "source": [
    "conn = create_connection()\n",
    "query = \"SELECT Name, Phone_No, Address FROM Customer;\"\n",
    "data = pd.read_sql(query, conn)\n",
    "print(data)\n",
    "conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Customer with User_ID 4 has been deleted.\n"
     ]
    }
   ],
   "source": [
    "conn = create_connection()\n",
    "cursor = conn.cursor()\n",
    "user_id = input(\"Enter the User_ID of the customer you want to delete: \")\n",
    "\n",
    "delete_query = \"\"\"\n",
    "    DELETE FROM Customer\n",
    "    WHERE User_ID = ?\n",
    "\"\"\"\n",
    "\n",
    "cursor.execute(delete_query, (user_id,))\n",
    "conn.commit()\n",
    "print(f\"Customer with User_ID {user_id} has been deleted.\")\n",
    "conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Name       Phone_No Address\n",
      "0  joe wael    01118559876  Diar 1\n",
      "1       amr  0454546106516  ma3ady\n",
      "2      seif     0118695366  Greens\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\youse\\AppData\\Local\\Temp\\ipykernel_27944\\290797400.py:3: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
      "  data = pd.read_sql(query, conn)\n"
     ]
    }
   ],
   "source": [
    "conn = create_connection()\n",
    "query = \"SELECT Name, Phone_No, Address FROM Customer;\"\n",
    "data = pd.read_sql(query, conn)\n",
    "print(data)\n",
    "conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
